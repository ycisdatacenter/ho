"use client";
import { useState } from "react";
import Image from "next/image";
import { X } from "lucide-react"; // Importing close icon

const AboutRayat = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const colleges = [
    "Karmaveer Bhaurao Patil College, Satara",
    "Dada Patil College, Karjat",
    "Balasaheb Desai College, Patan",
    "Mahatma Gandhi College, Ahmedpur",
    "Savitribai Phule College, Satara",
    "Chhatrapati Shivaji College, Satara",
    "Dr. Babasaheb Ambedkar College, Mahad",
    "Yashwantrao Chavan Institute of Science, Satara",
    "Sant Dnyaneshwar College, Paithan"
  ];

  return (
    <div className="w-full relative">
      <section className="bg-white py-12 px-4">
        <div className="max-w-4xl mx-auto border p-4 shadow-lg rounded-lg">
          <h2 className="text-center text-lg md:text-xl font-semibold text-red-700 mb-4">
            Rayat Shikshan Sanstha, Satara (Management)
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-center text-center md:text-left">
            <div className="space-y-2">
              <p
                className="border border-teal-400 px-3 py-2 rounded-lg font-semibold cursor-pointer hover:bg-teal-100"
                onClick={() => setIsModalOpen(true)}
              >
                Senior Colleges (42)
              </p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Secondary Schools (453)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Teachers Training Colleges (07)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Primary Schools (67)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Pre-Primary Schools (54)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Hostels (83)</p>
            </div>

            <div className="flex flex-col items-center border border-teal-400 p-4 rounded-lg">
              {/* <Image src="/images/logo.png" alt="Rayat Logo" width={100} height={100} className="mb-3" />
              <Image src="/images/rayat1.jpg" alt="Founder" width={160} height={120} className="mb-3" /> */}
              <div className="text-center">
                <p className="font-bold mt-2">Founder</p>
                <p>Padmabhushan Dr. Karmaveer Bhaurao Patil in 1919</p>
                <p className="font-bold mt-2">Philosophy:</p>
                <p>EARN AND LEARN</p>
                <p className="font-bold mt-2">Work area:</p>
                <p>15 Districts of Maharashtra and 1 District of Karnataka.</p>
              </div>
            </div>
            <div className="space-y-2">
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Administrative Offices (07)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Ashram Schools (08)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">ITIs (03)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Other Branches (11)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Rayat Institute of Research and Development (01)</p>
              <p className="border border-teal-400 px-3 py-2 rounded-lg font-semibold">Total (736)</p>
            </div>
          </div>
          <p className="text-center mt-6 font-semibold text-lg border-t pt-3">
            A Family of <span className="text-blue-700">12,442</span> Staff and <span className="text-red-700">4,34,252</span> Students
          </p>
        </div>
        
      </section>

      {isModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96 max-h-[80vh] overflow-y-auto text-center relative">
            <button
              className="absolute top-3 right-3 text-gray-600 hover:text-red-600"
              onClick={() => setIsModalOpen(false)}
            >
              <X size={24} />
            </button>
            <h3 className="text-lg font-semibold mb-4">Senior Colleges (42)</h3>
            <ul className="text-left space-y-2">
              {colleges.map((college, index) => (
                <li key={index} className="border-b pb-2">{college}</li>
              ))}
            </ul>
            <button
              className="mt-4 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
              onClick={() => setIsModalOpen(false)}
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AboutRayat;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
navbar

"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import "@fontsource/poppins";


const Navbar = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState(null);
  const [isScrolled, setIsScrolled] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 50);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleDropdown = (dropdown) => {
    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);
  };

  return (
    <header className="bg-teal-900 text-white shadow-md relative z-50 font-poppins">
      <nav className={`transition-all duration-300 ${isScrolled ? "fixed top-0 w-full shadow-md bg-teal-900" : "relative"}`}>
        <div className="max-w-screen-lg mx-auto px-4 flex items-center justify-between py-2 md:py-2">
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="md:hidden p-2 text-white bg-teal-700 rounded"
          >
            <span className="sr-only">Toggle Menu</span>
            <svg className="w-5 h-5" viewBox="0 0 17 14" fill="none">
              <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 1h15M1 7h15M1 13h15" />
            </svg>
          </button>

          <div className={`${isMobileMenuOpen ? "block" : "hidden"} md:flex md:items-center md:space-x-4 text-sm font-medium absolute md:relative top-full right-0 w-full md:w-auto bg-teal-900 md:bg-transparent p-4 md:p-0 shadow-md md:shadow-none flex flex-col md:flex-row whitespace-nowrap`}>
            <Link href="/" className="px-2 py-1 block">Home</Link>
            
            {/* About Dropdown */}
            <div className="relative w-full md:w-auto" onMouseEnter={() => setActiveDropdown("about")} onMouseLeave={() => setActiveDropdown(null)}>
              <button className="px-2 py-1 flex items-center w-full md:w-auto" onClick={() => toggleDropdown("about")}>About
                <svg className="w-3 h-3 ml-2" viewBox="0 0 10 6" fill="none">
                  <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 4 4 4-4" />
                </svg>
              </button>
              {activeDropdown === "about" && (
                <div className="md:absolute left-0 top-full bg-white md:bg-teal-800 rounded shadow-md w-full md:w-40 text-black md:text-white">
                  <Link href="/history" className="block px-3 py-1">History</Link>
                  <Link href="/organization" className="block px-3 py-1">Organization</Link>
                  <Link href="/visionmission" className="block px-3 py-1">Vision & Mission</Link>
                  <Link href="/awards" className="block px-3 py-1">Awards & Honours</Link>
                  <Link href="/memorandum" className="block px-3 py-1">Memorandum of <br /> understanding (MoU)</Link>
                  <Link href="/projects" className="block px-3 py-1">Projects</Link>
                </div>
              )}
            </div>
            
            <Link href="/academics" className="px-2 py-1 block">Academics</Link>
            <Link href="/branches" className="px-2 py-1 block">Branches</Link>
            
            {/* Facilities Dropdown */}
            <div className="relative w-full md:w-auto" onMouseEnter={() => setActiveDropdown("facilities")} onMouseLeave={() => setActiveDropdown(null)}>
              <button className="px-2 py-1 flex items-center w-full md:w-auto" onClick={() => toggleDropdown("facilities")}>Facilities
                <svg className="w-3 h-3 ml-2" viewBox="0 0 10 6" fill="none">
                  <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m1 1 4 4 4-4" />
                </svg>
              </button>
              {activeDropdown === "facilities" && (
                <div className="md:absolute left-0 top-full bg-white md:bg-teal-800 rounded shadow-md w-full md:w-40 text-black md:text-white">
                  <Link href="/facilities" className="block px-3 py-1">Libraries</Link>
                  <Link href="/hostel" className="block px-3 py-1">Hostel</Link>
                  <Link href="/sports" className="block px-3 py-1">Sports</Link>
                  <Link href="/studentactivity" className="block px-3 py-1">Student Activities</Link>
                </div>
              )}
            </div>
            
            <Link href="/research" className="px-2 py-1 block">Research</Link>
            <Link href="/recruitment" className="px-2 py-1 block">Recruitment</Link>
            <Link href="/quicklinks" className="px-2 py-1 block">Quick Links</Link>
            <Link href="/centenaryprojects" className="px-2 py-1 block">Centenary Projects</Link>
            <Link href="/ebooks" className="px-2 py-1 block">eBooks</Link>
            <Link href="/tender" className="px-2 py-1 block">Tender</Link>
            <Link href="/onlineinfo" className="px-2 py-1 block">Online Info</Link>
          </div>
        </div>
      </nav>
    </header>
  );
};

export default Navbar;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import "@fontsource/poppins";

const Navbar = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState(null);
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 50);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleDropdown = (dropdown) => {
    setActiveDropdown(activeDropdown === dropdown ? null : dropdown);
  };

  return (
    <header className="bg-teal-900 text-white shadow-md relative z-50 font-poppins">
      <nav className={`transition-all duration-300 ${isScrolled ? "fixed top-0 w-full shadow-md bg-teal-900" : "relative"}`}>
        <div className="px-4 flex items-center justify-between py-2 md:py-2 w-full">
          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="md:hidden p-2 text-white bg-teal-700 rounded"
          >
            <span className="sr-only">Toggle Menu</span>
            <svg className="w-5 h-5" viewBox="0 0 17 14" fill="none">
              <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 1h15M1 7h15M1 13h15" />
            </svg>
          </button>

          {/* Navigation Links */}
          <div className={`absolute md:relative top-full left-0 w-full bg-teal-900 md:bg-transparent md:flex md:items-center md:space-x-4 text-sm font-medium transition-all duration-300 ${isMobileMenuOpen ? "block" : "hidden"}`}>
            <Link href="/" className="block px-4 py-2 md:px-2">Home</Link>

            {/* About Dropdown */}
            <div className="relative w-full md:w-auto" onMouseEnter={() => setActiveDropdown("about")} onMouseLeave={() => setActiveDropdown(null)}>
              <button className="px-4 py-2 flex items-center w-full md:w-auto" onClick={() => toggleDropdown("about")}>About</button>
              {activeDropdown === "about" && (
                <div className="bg-white md:bg-teal-800 rounded shadow-md w-full md:w-48 text-black md:text-white md:absolute">
                  <Link href="/history" className="block px-4 py-2 hover:bg-teal-700">History</Link>
                  <Link href="/organization" className="block px-4 py-2 hover:bg-teal-700">Organization</Link>
                  <Link href="/visionmission" className="block px-4 py-2 hover:bg-teal-700">Vision & Mission</Link>
                  <Link href="/awards" className="block px-4 py-2 hover:bg-teal-700">Awards & Honours</Link>
                  <Link href="/memorandum" className="block px-4 py-2 hover:bg-teal-700">Memorandum (MoU)</Link>
                  <Link href="/campus" className="block px-4 py-2 hover:bg-teal-700">Campus</Link>
                  <Link href="/projects" className="block px-4 py-2 hover:bg-teal-700">Projects</Link>
                </div>
              )}
            </div>

            <Link href="/academics" className="block px-4 py-2 md:px-2">Academics</Link>
            <Link href="/branches" className="block px-4 py-2 md:px-2">Branches</Link>

            {/* Facilities Dropdown */}
            <div className="relative w-full md:w-auto" onMouseEnter={() => setActiveDropdown("facilities")} onMouseLeave={() => setActiveDropdown(null)}>
              <button className="px-4 py-2 flex items-center w-full md:w-auto" onClick={() => toggleDropdown("facilities")}>Facilities</button>
              {activeDropdown === "facilities" && (
                <div className="bg-white md:bg-teal-800 rounded shadow-md w-full md:w-48 text-black md:text-white md:absolute">
                  <Link href="/libraries" className="block px-4 py-2 hover:bg-teal-700">Libraries</Link>
                  <Link href="/hostel" className="block px-4 py-2 hover:bg-teal-700">Hostel</Link>
                  <Link href="/sports" className="block px-4 py-2 hover:bg-teal-700">Sports</Link>
                  <Link href="/studentactivity" className="block px-4 py-2 hover:bg-teal-700">Student Activities</Link>
                </div>
              )}
            </div>

            <Link href="/research" className="block px-4 py-2 md:px-2">Research</Link>
            <Link href="/recruitment" className="block px-4 py-2 md:px-2">Recruitment</Link>
            <Link href="/quicklinks" className="block px-4 py-2 md:px-2">Quick Links</Link>
            <Link href="/centenaryprojects" className="block px-4 py-2 md:px-2">Centenary Projects</Link>
            <Link href="/ebooks" className="block px-4 py-2 md:px-2">eBooks</Link>
            <Link href="/tender" className="block px-4 py-2 md:px-2">Tender</Link>
            <Link href="/onlineinfo" className="block px-4 py-2 md:px-2">Online Info</Link>
          </div>
        </div>
      </nav>
    </header>
  );
};

export default Navbar;



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<div> <h3 className="text-lg font-bold mb-3 text-gray-200">Contact</h3> <p className="text-gray-300 text-lg">📞 02162 233 857</p> <br /> <p className="text-gray-300 text-lg">📍 Karmaveer Samadhi Parisar, Satara, Maharashtra 415001</p><br /> <p className="text-lg"> ✉️ <a href="mailto:secretary@rayatshikshan.edu" className="text-blue-300 hover:underline"> secretary@rayatshikshan.edu </a> </p> </div>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ThreeSections.js 

"use client";
import Image from "next/image";
import { useState, useEffect } from "react";
import NewsSection from "./NewsSection";

const ThreeSections = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [modalTitle, setModalTitle] = useState("");
  const [modalItems, setModalItems] = useState([]);
  const [circulars, setCirculars] = useState([]);

  const openModal = (title, items) => {
    setModalTitle(title);
    setModalItems(items);
    setModalOpen(true);
  };

  useEffect(() => {
    const fetchNews = async () => {
      try {
        const response = await fetch("/api/news");
        const data = await response.json();
        setCirculars(
          data.map((item) => ({
            id: item.id,
            title: item.title,
            pdf: item.file_path,
          }))
        );
      } catch (error) {
        console.error("Error fetching news:", error);
      }
    };

    fetchNews();
  }, []);

  return (
    <div className="[background-color:hsl(184,50%,85%)] py-8">
      <h1 className="text-3xl font-bold text-center text-gray-900 mb-6">News</h1>
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-center w-full mb-5">
          <hr className="border border-black w-1/4" />
          <Image src="/images/logohr.png" alt="logo" width={60} height={50} className="mx-4" />
          <hr className="border border-black w-1/4" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <NewsSection title="Circulars" items={circulars} link="/circulars" openModal={openModal} />
          <NewsSection title="Notices" items={notices} openModal={openModal} />
          <NewsSection title="Downloads" items={downloads} openModal={openModal} />
        </div>
      </div>

      {modalOpen && <Modal title={modalTitle} items={modalItems} onClose={() => setModalOpen(false)} />}
    </div>
  );
};

// Dummy data for Notices and Downloads
const notices = [
  { id: 1, title: "Notice 1: Important Update", pdf: "/path/to/notice1.pdf" },
  { id: 2, title: "Notice 2: Event Reminder", pdf: "/path/to/notice2.pdf" },
  
];

const downloads = [
  { id: 1, title: "Download 1: File A", pdf: "/path/to/file1.pdf" },
  { id: 2, title: "Download 2: File B", pdf: "/path/to/file2.pdf" },
];

export default ThreeSections;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

NewsSection.js

"use client";
import { useRouter } from "next/navigation";
import { useEffect, useRef, useState } from "react";

const NewsSection = ({ title, items = [], link, openModal }) => {
  const router = useRouter();
  const scrollContainerRef = useRef(null);
  const intervalRef = useRef(null);

  // 🛑 Remove duplicate items
  const uniqueItems = Array.from(new Map(items.map(item => [item.title, item])).values());

  useEffect(() => {
    const startScrolling = () => {
      intervalRef.current = setInterval(() => {
        if (scrollContainerRef.current) {
          scrollContainerRef.current.scrollBy({ top: 1, behavior: "smooth" });
          if (scrollContainerRef.current.scrollTop + scrollContainerRef.current.clientHeight >= scrollContainerRef.current.scrollHeight) {
            scrollContainerRef.current.scrollTop = 0;
          }
        }
      }, 50);
    };

    startScrolling();

    const stopScrolling = () => clearInterval(intervalRef.current);

    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener("mouseenter", stopScrolling);
      scrollContainer.addEventListener("mouseleave", startScrolling);
    }

    return () => {
      clearInterval(intervalRef.current);
      if (scrollContainer) {
        scrollContainer.removeEventListener("mouseenter", stopScrolling);
        scrollContainer.removeEventListener("mouseleave", startScrolling);
      }
    };
  }, []);

  return (
    <div className="bg-white p-6 rounded-lg shadow-md flex flex-col">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
        {title === "Notices" || title === "Downloads" ? (
          <button
            onClick={() => openModal(title, uniqueItems)}
            className="bg-teal-600 text-white px-4 py-2 rounded-lg hover:opacity-80 transition duration-300"
          >
            VIEW ALL
          </button>
        ) : (
          link && (
            <button
              onClick={() => router.push(link)}
              className="bg-teal-600 text-white px-4 py-2 rounded-lg hover:opacity-80 transition duration-300"
            >
              VIEW ALL
            </button>
          )
        )}
      </div>

      {/* 🛠 Scrolling Container */}
      <div ref={scrollContainerRef} className="flex-grow max-h-48 overflow-hidden">
        <div className="space-y-4">
          {uniqueItems.map((item, index) => (
            <div key={index} className="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
              <span className="text-gray-700">{item.title}</span>
              <a href={item.pdf} download className="text-teal-900 hover:text-blue-700">📥</a>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default NewsSection;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

NewsSection

"use client";
import { useRouter } from "next/navigation";
import { useEffect, useRef, useState } from "react";

const NewsSection = ({ title, items = [], link, openModal }) => {
  const router = useRouter();
  const scrollContainerRef = useRef(null);
  const intervalRef = useRef(null);

  // 🛑 Remove duplicate items
  const uniqueItems = Array.from(new Map(items.map(item => [item.title, item])).values());

  useEffect(() => {
    const startScrolling = () => {
      intervalRef.current = setInterval(() => {
        if (scrollContainerRef.current) {
          scrollContainerRef.current.scrollBy({ top: 1, behavior: "smooth" });
          if (scrollContainerRef.current.scrollTop + scrollContainerRef.current.clientHeight >= scrollContainerRef.current.scrollHeight) {
            scrollContainerRef.current.scrollTop = 0;
          }
        }
      }, 50);
    };

    startScrolling();

    const stopScrolling = () => clearInterval(intervalRef.current);

    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener("mouseenter", stopScrolling);
      scrollContainer.addEventListener("mouseleave", startScrolling);
    }

    return () => {
      clearInterval(intervalRef.current);
      if (scrollContainer) {
        scrollContainer.removeEventListener("mouseenter", stopScrolling);
        scrollContainer.removeEventListener("mouseleave", startScrolling);
      }
    };
  }, []);

  return (
    <div className="bg-white p-6 rounded-lg shadow-md flex flex-col">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold text-gray-900">{title}</h2>
        {title === "Notices" || title === "Downloads" ? (
          <button
            onClick={() => openModal(title, uniqueItems)}
            className="bg-teal-600 text-white px-4 py-2 rounded-lg hover:opacity-80 transition duration-300"
          >
            VIEW ALL
          </button>
        ) : (
          link && (
            <button
              onClick={() => router.push(link)}
              className="bg-teal-600 text-white px-4 py-2 rounded-lg hover:opacity-80 transition duration-300"
            >
              VIEW ALL
            </button>
          )
        )}
      </div>

      {/* 🛠 Scrolling Container */}
      <div ref={scrollContainerRef} className="flex-grow max-h-48 overflow-hidden">
        <div className="space-y-4">
          {uniqueItems.map((item, index) => (
            <div key={index} className="flex items-center justify-between bg-gray-50 p-4 rounded-lg">
              <span className="text-gray-700">{item.title}</span>
              <a href={item.pdf} download className="text-teal-900 hover:text-blue-700">📥</a>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default NewsSection;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


slider code

"use client";

import Image from "next/image";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

const images = [
  "/images/sliderf.jpg",
  "/images/slider6.jpg",
  "/images/slider4.jpg",
  "/images/sider8.jpg",
];

const HeroSlider = () => {
  return (
    <div className="relative w-full min-h-[400px] md:h-[600px] lg:h-[700px] flex items-center justify-center overflow-hidden">
      <Swiper
        modules={[Navigation, Pagination, Autoplay]}
        spaceBetween={0}
        slidesPerView={1}
        navigation
        pagination={{ clickable: true }}
        loop={true}
        autoplay={{ delay: 5000, disableOnInteraction: false }}
        className="w-full h-full"
      >
        {images.map((src, index) => (
          <SwiperSlide key={index} className="relative w-full h-full">
            <div className="relative w-full h-[400px] md:h-[600px] lg:h-[700px] before:absolute before:inset-0 before:bg-white/10">
              <Image
                src={src}
                alt={`Slide ${index + 1}`}
                layout="fill"
                objectFit="cover"
                className="brightness-110 contrast-105"
                priority={index === 0}
              />
            </div>
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  );
};

export default HeroSlider;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Recent Activities

"use client";
import Link from "next/link";
import { useRef, useState } from "react";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

export default function RecentActivities() {
  const scrollRef = useRef(null);
  const [selectedImage, setSelectedImage] = useState(null);

  const activities = [
    { src: "/images/recentact1.jpg", title: "आर्टिफिशियल इंटेलिजन्ससाठी 'रयत'चे दमदार पाऊल " },
    { src: "/images/recentact2.jpg", title: "शोध मराठी मनाचा" },
    { src: "/images/recentacti3.jpg", title: "२० वे जागतिक मराठी संमेलन " },
    { src: "/images/recentact3.jpg", title: "WE ARE IN NEWS" },
    { src: "/images/recentact3.jpg", title: "WE ARE IN NEWS" },
  ];

  const scroll = (direction) => {
    if (scrollRef.current) {
      const { scrollLeft, clientWidth } = scrollRef.current;
      const scrollAmount = clientWidth / 2;

      scrollRef.current.scrollTo({
        left: direction === "left" ? scrollLeft - scrollAmount : scrollLeft + scrollAmount,
        behavior: "smooth",
      });
    }
  };

  return (
    <div className="bg-gray-100 py-10 px-4 relative z-10">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">RECENT ACTIVITIES</h2>
          <Link href="/news">
            <button className="bg-[#0C3B39]  text-white px-4 py-2 rounded-lg hover:opacity-80 transition duration-300">
              VIEW ALL
            </button>
          </Link>
        </div>

        <div className="relative">
          {/* Scrollable container */}
          <div
            ref={scrollRef}
            className="flex gap-6 overflow-x-auto scroll-smooth scrollbar-hide snap-x"
          >
            {activities.map((item, idx) => (
              <div key={idx} className="snap-start flex-shrink-0 w-1/3">
                <div
                  className="bg-white shadow-lg rounded-lg overflow-hidden p-4 cursor-pointer h-[320px] flex flex-col"
                  onClick={() => setSelectedImage(item.src)}
                >
                  <div className="h-56 w-full">
                    <img src={item.src} alt={item.title} className="w-full h-full object-cover rounded-lg" />
                  </div>
                  <h3 className="text-center mt-4 font-semibold">{item.title}</h3>
                </div>
              </div>
            ))}
          </div>

          {/* Navigation Buttons */}
          <button
            onClick={() => scroll("left")}
            className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-white p-2 rounded-full shadow-lg"
          >
            <ChevronLeft className="w-6 h-6 text-gray-800" />
          </button>
          <button
            onClick={() => scroll("right")}
            className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-white p-2 rounded-full shadow-lg"
          >
            <ChevronRight className="w-6 h-6 text-gray-800" />
          </button>
        </div>
      </div>

      {/* Modal */}
      {selectedImage && (
          <div
          className="fixed inset-0 backdrop-blur-sm flex justify-center items-center z-50"
          onClick={() => setSelectedImage(null)}
        >
          <div
            className="relative [background-color:hsl(184,50%,85%)] p-4 rounded-lg shadow-lg max-w-3xl w-full"
            onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
          >
            <button
              className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300"
              onClick={() => setSelectedImage(null)}
            >
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img
              src={selectedImage}
              alt="Selected"
              className="w-full h-auto max-h-[80vh] object-contain rounded-lg"
            />
          </div>
        </div>
      )}
    </div>
  );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Achievements

"use client";
import Link from "next/link";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const imageData = [
  { img: "/images/achiev.jpg", name: "शोध मराठी मनाचा" },
  { img: "/images/achiev3.jpg", name: "अमृत महोत्सव" },
  { img: "/images/achiev2.jpg", name: "विद्यार्थी गौरव" },
];

const testimonialData = [
  {
    img: "/images/achiev.jpg",
    des: "जागतिक मराठी अकादमी व रयत शिक्षण संस्था यांच्या संयुक्त विद्यमाने आयोजित 'शोध मराठी मनाचा' ह्या २० व्या जागतिक मराठी संमेलनाचे उद्घाटन पद्मविभूषण खा. मा. खासदार शरदचंद्रजी पवार साहेब यांच्या शुभहस्ते झाले.",
    name: "शोध मराठी मनाचा",
  },
  {
    img: "/images/achiev3.jpg",
    des: "दि २८/०९/२०२४ रोजी कर्जत जि .अहमदनगर येथील महात्मा गांधी विद्यालयाचा अमृत महोत्सव प्रारंभ, दादा पाटील महाविद्यालय कर्मवीर जयंती सप्ताह व हीरक महोत्सव सांगता व विद्यार्थिनी वसतिगृह विस्तारित इमारत उद्घाटन.",
    name: "अमृत महोत्सव",
  },
];

const HorizontalSlider = () => {
  const settings = {
    infinite: true,
    slidesToShow: 2,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 2000,
    arrows: true,
  };

  return (
    <div className="w-full max-w-lg">
      <Slider {...settings}>
        {imageData.map((item, index) => (
          <div key={index} className="p-2">
            <div className="bg-white shadow-md rounded-lg overflow-hidden">
              <img
                src={item.img}
                alt={item.name}
                className="w-full h-48 object-cover"
              />
              <div className="bg-teal-900 text-white p-2 text-center">
                {item.name}
              </div>
            </div>
          </div>
        ))}
      </Slider>
    </div>
  );
};

const VerticalSlider = () => {
  const settings = {
    infinite: true,
    slidesToShow: 2,
    slidesToScroll: 1,
    vertical: true,
    verticalSwiping: true,
    autoplay: true,
    autoplaySpeed: 2000,
    arrows: false,
  };

  return (
    <div className="w-full max-w-md h-72">
      <div className="bg-white p-3 rounded-lg border border-teal-900 shadow-md h-full flex flex-col justify-between">
        <div className="flex-grow overflow-hidden">
          <Slider {...settings}>
            {testimonialData.map((item, index) => (
              <div
                key={index}
                className="flex items-center p-2 border-b border-gray-300"
              >
                <img
                  src={item.img}
                  alt={item.name}
                  className="w-10 h-10 rounded-full border-2 border-blue-300 shadow-md mr-3"
                />
                <div>
                  <p className="text-xs text-gray-700">{item.des}</p>
                  <h6 className="text-xs font-semibold text-gray-600 mt-1">
                    {item.name}
                  </h6>
                </div>
              </div>
            ))}
          </Slider>
        </div>
        <div className="w-full flex justify-center mt-2">
          <Link href="/news">
            <button className="bg-teal-900 text-white px-4 py-2 rounded-lg shadow-md hover:bg-teal-700 transition-all text-sm">
              Read More
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};

const Achievements = () => {
  return (
    <div
      className="flex flex-col items-center p-6 space-y-6"
      style={{ backgroundColor: "hsl(184,50%,85%)" }}
    >
      <h2 className="text-4xl font-bold text-black">Our Achievements</h2>
      <div className="flex flex-col lg:flex-row items-center justify-center space-y-6 lg:space-y-0 lg:space-x-8">
        <HorizontalSlider />
        <VerticalSlider />
      </div>
    </div>
  );
};

export default Achievements;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HeaderSection

"use client";
import React from "react";

const ScrollingNews = () => {
  return (
    <div className="w-full p-2 bg-teal-900 rounded-lg shadow-lg overflow-hidden">
      <div className="flex items-center">
        <div className="flex-1 overflow-hidden mx-2">
          <div className="whitespace-nowrap text-white cursor-pointer font-semibold text-sm flex animate-scroll">
            <span className="mr-8">&#8226; VIT - Compuser</span>
            <span className="mr-8">&#8226; Breaking News: New Research Program Announced!</span>
            <span className="mr-8">&#8226; Admissions Open for 2025 - Apply Now!</span>
            <span className="mr-8">&#8226; Upcoming Event: Campus Open Day on March 15th</span>
            <span className="mr-8">&#8226; VIT - Compuser</span>
            <span className="mr-8">&#8226; Breaking News: New Research Program Announced!</span>
            <span className="mr-8">&#8226; Admissions Open for 2025 - Apply Now!</span>
            <span className="mr-8">&#8226; Upcoming Event: Campus Open Day on March 15th</span>
          </div>
        </div>
      </div>
      <style jsx>{`
        @keyframes scroll {
          from {
            transform: translateX(0);
          }
          to {
            transform: translateX(-50%);
          }
        }
        .animate-scroll {
          display: flex;
          white-space: nowrap;
          animation: scroll 15s linear infinite;
        }
      `}</style>
    </div>
  );
};

export default ScrollingNews;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Dashboard

"use client";

import { useRouter } from "next/navigation";
import Sidebar from "../components/Sidebar";
import Topbar from "../components/Topbar";

export default function Dashboard() {
  const router = useRouter();

  return (
    <div className="flex h-screen bg-gray-50">
        <Sidebar setActiveSection={(section) => {
          if (section === "addNews") {
            router.push("/addnews");
          } else if (section === "manageNews") {
            router.push("/managenews");
          } else if (section === "addNotice") {
            router.push("/addnotice");
          } else if (section === "manageNotices") {
            router.push("/managenotices");
          } else if (section === "addEvent") {
            router.push("/adddocuments");
          } else if (section === "manageEvents") {
            router.push("/managedocuments");
          } else if (section === "addGallery") {
            router.push("/addimage");
          } else if (section === "addRecentActivity") {
            router.push("/addevents");
          } else if (section === "manageRecentActivities") {
            router.push("/manageevents");
          } else if (section === "addAchievement") {
            router.push("/addachievements");
          } else if (section === "manageAchievements") {
            router.push("/manageachievements");
          } else if (section === "addAchievementnews") {
            router.push("/addachievementsnews");
          } else if (section === "manageAchievementsnews") {
            router.push("/manageachievementsnews");
          } 
          
        }} />

      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="flex-1 p-8 flex flex-col items-center justify-center">
          <h1 className="text-gray-700 text-3xl font-bold">
            Welcome to the Dashboard
          </h1>
          <p className="text-gray-500 mt-2 text-lg">
            Manage news, notices, and more.
          </p>
        </main>
      </div>
    </div>
  );
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

Sidebar

"use client";

import {
  LogOut,
  Home,
  Settings,
  Users,
  ChevronDown,
  PlusCircle,
  ClipboardList,
  Calendar,
  Image,
  Trophy,
  Newspaper,
} from "lucide-react";
import { useState } from "react";
import { useRouter } from "next/navigation"; // Import useRouter

export default function Sidebar({ setActiveSection }) {
  const [menuState, setMenuState] = useState({
    newsOpen: false,
    noticesOpen: false,
    eventsOpen: false,
    galleryOpen: false,
    recentActivitiesOpen: false,
    achievementsOpen: false,
  });

  const router = useRouter(); // Initialize the router

  const toggleMenu = (menu) => {
    setMenuState((prev) => ({ ...prev, [menu]: !prev[menu] }));
  };

  return (
    <aside className="w-64 bg-teal-900 text-white flex flex-col p-4">
      <h1 className="text-2xl font-bold mb-6">Dashboard</h1>
      <nav className="flex-1">
        <ul>
          {/* Home (Dashboard Link) */}
          <li className="mb-3">
            <button
              onClick={() => router.push("/dashboard")} // Navigate to Dashboard
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Home className="w-5 h-5 mr-2" /> Home
            </button>
          </li>

          {/* Circular (News) */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("newsOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Users className="w-5 h-5 mr-2" /> Circular
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.newsOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.newsOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addNews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add News
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageNews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage News
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Notices */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("noticesOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Settings className="w-5 h-5 mr-2" /> Notices
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.noticesOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.noticesOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addNotice")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Notice
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageNotices")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Notices
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Documents */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("eventsOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Calendar className="w-5 h-5 mr-2" /> Documents
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.eventsOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.eventsOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addEvent")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Documents
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageEvents")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Documents
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Slider */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("galleryOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Image className="w-5 h-5 mr-2" /> Slider
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.galleryOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.galleryOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addGallery")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Image
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Recent Activities */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("recentActivitiesOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Calendar className="w-5 h-5 mr-2" /> Recent Activities
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.recentActivitiesOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.recentActivitiesOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addRecentActivity")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Recent Activity
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageRecentActivities")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Recent Activities
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Achievements Section */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("achievementsOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Trophy className="w-5 h-5 mr-2" /> Achievements
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.achievementsOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.achievementsOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addAchievement")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Achievement
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageAchievements")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Achievements
                  </button>
                </li>
              </ul>
            )}
          </li>
{/* Achievements News Section */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("achievementsnewsOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Trophy className="w-5 h-5 mr-2" /> Achievements News
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.achievementsnewsOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.achievementsnewsOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addAchievementnews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Achievement News
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageAchievementsnews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Achievements News
                  </button>
                </li>
              </ul>
            )}
          </li>

          {/* Scrolling News Section */}
          <li className="mb-3">
            <button
              onClick={() => toggleMenu("scrollingNewsOpen")}
              className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
            >
              <Newspaper className="w-5 h-5 mr-2" /> Scrolling News
              <ChevronDown
                className={`w-4 h-4 ml-auto transition-transform ${
                  menuState.scrollingNewsOpen ? "rotate-180" : ""
                }`}
              />
            </button>
            {menuState.scrollingNewsOpen && (
              <ul className="ml-6 mt-2">
                <li>
                  <button
                    onClick={() => setActiveSection("addScrollingNews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" /> Add Scrolling News
                  </button>
                </li>
                <li className="mt-2">
                  <button
                    onClick={() => setActiveSection("manageScrollingNews")}
                    className="flex items-center p-2 hover:bg-teal-700 rounded w-full text-left"
                  >
                    <ClipboardList className="w-4 h-4 mr-2" /> Manage Scrolling News
                  </button>
                </li>
              </ul>
            )}
          </li>
        </ul>
      </nav>
    </aside>
  );
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Alumni


'use client';
import Image from "next/image";

const alumniData = [
  { name: "Hon'ble Dilip Dattatray Walse Patil", image: "/alumni/al1.jpg" },
  { name: "Hon'ble Ramsheth Changu Thakur", image: "/alumni/al2.jpg" },
  { name: "Hon'ble Adv. Ravindra Keshavrao Pawar", image: "/alumni/al3.jpg" },
  { name: "Hon'ble Smt. Meenatai Manikrao Jagadhane", image: "/alumni/al4.jpg" },
  { name: "Hon'ble Dr.Vishwajit Patangrao Kadam", image: "/alumni/al5.jpg" },
  { name: "Hon’ble Prabhakar Krishnaji Deshmukh", image: "/alumni/al6.jpg" },
  { name: "Hon’ble Dadabhau Dashrath Kalamkar", image: "/alumni/al7.jpg" },
  { name: "Hon’ble J. K. Bapu Jadhav", image: "/alumni/al8.jpg" },
  { name: "Hon’ble Ajit Bhikugounda Patil", image: "/alumni/al9.jpg" },
  { name: "Hon’ble Rahul Kundalik Jagtap", image: "/alumni/al10.jpg" },
  { name: "Subhas Chandra Bose", image: "/alumni/al1.jpg" },
  { name: "Rabindranath Tagore", image: "/alumni/al1.jpg" },
  { name: "Bal Gangadhar Tilak", image: "/alumni/al1.jpg" },
  { name: "Veer Savarkar", image: "/alumni/al1.jpg" },
  { name: "Sarojini Naidu", image: "path/to/image15.jpg" },
  { name: "Lata Mangeshkar", image: "path/to/image16.jpg" },
  { name: "Swami Vivekananda", image: "path/to/image17.jpg" },
  { name: "J.C. Bose", image: "path/to/image18.jpg" },
  { name: "C.V. Raman", image: "path/to/image19.jpg" },
  { name: "M. Visvesvaraya", image: "path/to/image20.jpg" },
//   { name: "Mother Teresa", image: "path/to/image21.jpg" },
//   { name: "Dr. Rajendra Prasad", image: "path/to/image22.jpg" },
//   { name: "Indira Gandhi", image: "path/to/image23.jpg" },
//   { name: "Dhirubhai Ambani", image: "path/to/image24.jpg" },
];

export default function Alumni() {
  return (
    <div className="relative w-full min-h-[200px] bg-white flex flex-col justify-center items-center py-4">
    <h2 className="text-3xl font-bold text-center mb-3">Our Alumni</h2>
    <div className="flex items-center justify-center w-full mb-4">
      <hr className="border border-black w-1/5" />
      <Image src="/images/logohr.png" alt="logo" width={50} height={40} className="mx-3" />
      <hr className="border border-black w-1/5" />
    </div>
  
    <div className="flex flex-col lg:flex-row w-full max-w-4xl min-h-[180px] border-2 border-white shadow-md">
      
      {/* Alumni Gallery Section */}
      <div className="w-full lg:w-3/4 bg-white flex justify-center items-center p-2">
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
          {alumniData.map((alumnus, index) => (
            <div key={index} className="relative w-[90px] sm:w-[110px] overflow-hidden rounded-lg shadow-sm group">
              <img src={alumnus.image} alt={alumnus.name} className="w-full h-full object-cover" />
              <div className="absolute bottom-0 left-0 w-full text-black text-xs font-bold py-1 px-2 text-center bg-white bg-opacity-75 opacity-0 group-hover:opacity-100 transition-opacity">
                {alumnus.name}
              </div>
            </div>
          ))}
        </div>
      </div>
  
      {/* Alumni Info Section */}
      <div className="w-full lg:w-1/4 bg-[#0C3B39] flex flex-col justify-center items-center text-white p-3">
        <h1 className="text-center font-serif text-sm sm:text-lg leading-snug">
          Rayat Shikshan Sanstha <br /> Alumni Association
        </h1>
        <button className="mt-3 bg-[#E0F2F1] text-black px-3 py-2 rounded-md text-sm transition-all hover:bg-[#ffd700] hover:text-white active:bg-[#0a221f] transform hover:scale-105 active:scale-95">
          Join Now
        </button>
      </div>
    </div>
  </div>
  
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
addschoolevents page

"use client";

import { useState } from "react";
import SidebarSchool from "../components/SidebarSchool";
import SchoolTopbar from "../components/SchoolTopbar";
import { useRouter } from "next/navigation";

export default function AddNews() {
  const [title, setTitle] = useState("");
  const [file, setFile] = useState(null);
  const [message, setMessage] = useState("");
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!title || !file) {
      setMessage("All fields are required");
      return;
    }

    const formData = new FormData();
    formData.append("title", title);
    formData.append("file", file);

    try {
      const response = await fetch("/api/addSchoolEvents", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();
      setMessage(data.message);

      if (response.ok) {
        setTitle("");
        setFile(null);
        router.push("/manageschoolevents"); // Redirect to manage news after adding
      }
    } catch (error) {
      setMessage("Error uploading event");
    }
  };

  return (
   <div className="flex h-screen bg-gray-50">
         {/* SidebarSchool Component */}
         <SidebarSchool setActiveSection={(section) => {
           if  (section === "addEvent") {
             router.push("/adddocuments");
           } else if (section === "manageEvents") {
             router.push("/managedocuments");
           }else if (section === "addSchoolInfo") {
               router.push("/addschoolinfo");
             }else if (section === "manageSchoolInfo") {
               router.push("/manageschoolinfo");
             }else if (section === "addRecentsActivity") {
               router.push("/addschoolactivity");
             }else if (section === "manageRecentsActivities") {
               router.push("/manageschoolactivity");
             }else if (section === "addRecentEvents") {
               router.push("/addschoolevents");
             }else if (section === "manageRecentEvents") {
               router.push("/manageschoolevents");
          
           }
           
         }} />

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Topbar */}
        <SchoolTopbar />

        {/* Add News Form */}
        <main className="flex-1 p-8">
          <div className="max-w-lg mx-auto bg-white p-6 rounded shadow">
            <h2 className="text-xl font-bold mb-4">Add Event</h2>
            {message && <p className="text-red-600">{message}</p>}
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-gray-700">Title</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>

              <div>
                <label className="block text-gray-700">Upload File</label>
                <input
                  type="file"
                  onChange={(e) => setFile(e.target.files[0])}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>

              <button
                type="submit"
                className="bg-teal-900 text-white p-2 rounded w-full"
              >
                Upload Event
              </button>
            </form>
          </div>
        </main>
      </div>
    </div>
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

registration page

"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Swal from "sweetalert2";
import axios from "axios";

export default function Register() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [regions, setRegions] = useState([]);
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [schools, setSchools] = useState([]);
  const [selectedSchool, setSelectedSchool] = useState(null);
  const router = useRouter();

  // Fetch regions on component mount
  useEffect(() => {
    const fetchRegions = async () => {
      try {
        const response = await axios.get("/api/regions"); // Endpoint to fetch regions
        setRegions(response.data); // Assuming response.data is an array of regions
      } catch (error) {
        console.error("Error fetching regions:", error);
      }
    };

    fetchRegions();
  }, []);

  // Fetch schools based on selected region
  useEffect(() => {
    const fetchSchools = async () => {
      if (selectedRegion) {
        try {
          const response = await axios.get(`/api/schools?region_id=${selectedRegion}`); // API request with region_id
          setSchools(response.data); // Assuming response.data contains the schools
        } catch (error) {
          console.error("Error fetching schools:", error);
        }
      }
    };
  
    fetchSchools();
  }, [selectedRegion]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      Swal.fire("Error", "Passwords do not match", "error");
      return;
    }

    try {
      const response = await axios.post("/api/register", { email, password, selectedRegion, selectedSchool });

      if (response.data.success) {
        Swal.fire("Success", "Registration successful!", "success").then(() => {
          router.push("/schoollogin");
        });
      } else {
        Swal.fire("Error", response.data.message, "error");
      }
    } catch (error) {
      Swal.fire("Error", "An error occurred", "error");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-2xl p-8">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Create a New Account</h2>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">

          {/* Region Dropdown */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Select Region</label>
            <select
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              value={selectedRegion}
              onChange={(e) => setSelectedRegion(e.target.value)}
              required
            >
              <option value="">Select a Region</option>
              {regions.map((region) => (
                <option key={region.id} value={region.id}>
                  {region.name}
                </option>
              ))}
            </select>
          </div>

          {/* Schools Dropdown (Based on Region) */}
          {selectedRegion && (
            <div>
              <label className="block text-sm font-medium text-gray-700">Select School</label>
              <select
                className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
                value={selectedSchool}
                onChange={(e) => setSelectedSchool(e.target.value)}
                required
              >
                <option value="">Select a School</option>
                {schools.map((school) => (
                  <option key={school.id} value={school.id}>
                    {school.name}
                  </option>
                ))}
              </select>
            </div>
          )}

          {/* Email Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Password Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          {/* Confirm Password Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700">Confirm Password</label>
            <input
              type="password"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Confirm your password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white p-3 rounded-lg font-semibold shadow-md"
          >
            Register
          </button>
        </form>

        <div className="mt-4 text-center">
          <p className="text-sm text-gray-600">
            Already have an account?{" "}
            <a href="/schoollogin" className="text-teal-600 hover:underline">
              Sign In
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}
  
///  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

schoollogin page

"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Swal from "sweetalert2";
import axios from "axios";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("/api/schoolLogin", { email, password });

      if (response.data.success) {
        // Store user data in localStorage or session storage (for example)
        localStorage.setItem("userId", response.data.userId);
        localStorage.setItem("username", response.data.username);

        Swal.fire("Success", "Login successful!", "success").then(() => {
          router.push("/dashboardschool");  // Redirect to the dashboard
        });
      } else {
        Swal.fire("Error", response.data.message, "error");
      }
    } catch (error) {
      Swal.fire("Error", "An error occurred", "error");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-2xl p-8">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Sign in to your account</h2>
          <p className="text-sm text-gray-600">Welcome back! Please enter your details.</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white p-3 rounded-lg font-semibold shadow-md"
          >
            Sign In
          </button>
        </form>
      </div>
    </div>
  );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

dashboardschool page

"use client";

import { useRouter } from "next/navigation";
import SidebarSchool from "../components/SidebarSchool";
import SchoolTopbar from "../components/SchoolTopbar";

export default function Dashboard() {
  const router = useRouter();

  return (
    <div className="flex h-screen bg-gray-50">
        {/* SidebarSchool Component */}
        <SidebarSchool setActiveSection={(section) => {
          if  (section === "addEvent") {
            router.push("/adddocuments");
          } else if (section === "manageEvents") {
            router.push("/managedocuments");
          }else if (section === "addSchoolInfo") {
              router.push("/addschoolinfo");
            }else if (section === "manageSchoolInfo") {
              router.push("/manageschoolinfo");
            }else if (section === "addRecentsActivity") {
              router.push("/addschoolactivity");
            }else if (section === "manageRecentsActivities") {
              router.push("/manageschoolactivity");
            }else if (section === "addRecentEvents") {
              router.push("/addschoolevents");
            }else if (section === "manageRecentEvents") {
              router.push("/manageschoolevents");
         
          }
          
        }} />

      <div className="flex-1 flex flex-col">
       <SchoolTopbar />
        <main className="flex-1 p-8 flex flex-col items-center justify-center">
          <h1 className="text-gray-700 text-3xl font-bold">
            Welcome to the Dashboard
          </h1>
          <p className="text-gray-500 mt-2 text-lg">
            Manage news, notices, and more.
          </p>
        </main>
      </div>
    </div>
  );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

api/schoolLogin 

import mysql from "mysql2/promise";
import bcrypt from "bcrypt";

// Create a connection to your MySQL database
const db = await mysql.createConnection({
  host: 'localhost',      // Update with your MySQL host
  user: 'root',           // Update with your MySQL username
  password: '',           // Update with your MySQL password
  database: 'rayat',      // Update with your database name
});

export async function POST(req) {
  const { email, password } = await req.json();

  try {
    // Query to fetch user by email
    const [rows] = await db.execute(
      "SELECT id, school_id, email, password FROM users WHERE email = ?",
      [email]
    );

    // Check if user exists
    if (rows.length === 0) {
      return new Response(
        JSON.stringify({ success: false, message: "Invalid email or password" }),
        { status: 400 }
      );
    }

    const user = rows[0];

    // Compare the provided password with the stored hashed password
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return new Response(
        JSON.stringify({ success: false, message: "Invalid email or password" }),
        { status: 400 }
      );
    }

    // If credentials are correct, return success and user data
    return new Response(
      JSON.stringify({
        success: true,
        userId: user.id,
        username: user.username,
      }),
      { status: 200 }
    );
  } catch (error) {
    console.error("Error during login:", error);
    return new Response(
      JSON.stringify({ success: false, message: "An error occurred" }),
      { status: 500 }
    );
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


addschoolinfo page


"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react"; // ✅ Import useSession
import { useRouter } from "next/navigation";
import SidebarSchool from "../components/SidebarSchool";
import SchoolTopbar from "../components/SchoolTopbar";

export default function AddNews() {
  const { data: session } = useSession(); // ✅ Get session data
  const [principalName, setPrincipalName] = useState("");
  const [vicePrincipalName, setVicePrincipalName] = useState("");
  const [contact, setContact] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const [schoolName, setSchoolName] = useState(""); // ✅ Added missing state
  const router = useRouter();

  // Fetch school name on component mount
  useEffect(() => {
    const fetchSchoolInfo = async () => {
      const res = await fetch("/api/addSchoolInfo");
      const data = await res.json();
      if (res.ok) {
        setSchoolName(data.schoolName);
      } else {
        setMessage(data.message);
      }
    };
    fetchSchoolInfo();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    const response = await fetch("/api/addSchoolInfo", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        principalName,
        vicePrincipalName,
        contact,
        email,
        school_id: session?.user?.school_id || 1, // ✅ Now session is defined
      }),
    });

    const data = await response.json();
    setMessage(data.message);

    if (response.ok) {
      setPrincipalName("");
      setVicePrincipalName("");
      setContact("");
      setEmail("");
      router.push("/manageschoolinfo");
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      <SidebarSchool
        setActiveSection={(section) => {
          const routes = {
            addEvent: "/adddocuments",
            manageEvents: "/managedocuments",
            addSchoolInfo: "/addschoolinfo",
            manageSchoolInfo: "/manageschoolinfo",
            addRecentsActivity: "/addschoolactivity",
            manageRecentsActivities: "/manageschoolactivity",
            addRecentEvents: "/addschoolevents",
            manageRecentEvents: "/manageschoolevents",
          };
          router.push(routes[section] || "/");
        }}
      />

      <div className="flex-1 flex flex-col">
        <SchoolTopbar />
        <main className="flex-1 p-8">
          <div className="max-w-lg mx-auto bg-white p-6 rounded shadow">
            <h2 className="text-xl font-bold mb-4">Add School Information</h2>
            {message && <p className="text-red-600">{message}</p>}
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-gray-700">Principal Name</label>
                <input
                  type="text"
                  value={principalName}
                  onChange={(e) => setPrincipalName(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              <div>
                <label className="block text-gray-700">Vice Principal Name</label>
                <input
                  type="text"
                  value={vicePrincipalName}
                  onChange={(e) => setVicePrincipalName(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              <div>
                <label className="block text-gray-700">Contact</label>
                <input
                  type="text"
                  value={contact}
                  onChange={(e) => setContact(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              <div>
                <label className="block text-gray-700">Email</label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full p-2 border rounded"
                  required
                />
              </div>
              <button type="submit" className="bg-teal-900 text-white p-2 rounded w-full">
                Submit Information
              </button>
            </form>
          </div>
        </main>
      </div>
    </div>
  );
}
///////////////////////////////////////////////////////////////////////////////////////////

"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Swal from "sweetalert2";
import axios from "axios";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const router = useRouter();

  const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const response = await axios.post("/api/schoolLogin", { email, password });

    if (response.data.success) {
      // Store user data in localStorage
      localStorage.setItem("userId", response.data.userId);
      localStorage.setItem("username", response.data.username);
      localStorage.setItem("school_id", response.data.school_id); // Store school_id

      Swal.fire("Success", "Login successful!", "success").then(() => {
        router.push("/dashboardschool");  // Redirect to the dashboard
      });
    } else {
      Swal.fire("Error", response.data.message, "error");
    }
  } catch (error) {
    Swal.fire("Error", "An error occurred", "error");
  }
};


  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-2xl p-8">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-800">Sign in to your account</h2>
          <p className="text-sm text-gray-600">Welcome back! Please enter your details.</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-teal-500 shadow-sm"
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-teal-600 hover:bg-teal-700 text-white p-3 rounded-lg font-semibold shadow-md"
          >
            Sign In
          </button>
        </form>
      </div>
    </div>
  );
}
/////////////////////////////

import db from "../../../lib/db"; // Adjust the path based on your folder structure

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, message: "Method Not Allowed" });
  }

  const { email, password } = req.body;

  try {
    const [user] = await db.query(
      "SELECT id, school_id FROM users WHERE email = ? AND password = ?",
      [email, password]
    );

    console.log("Database result:", user); // ✅ Debugging

    if (!user) {
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    res.json({
      success: true,
      userId: user.id,
      schoolId: user.school_id, // ✅ Make sure this is correct
    });
  } catch (error) {
    console.error("Database error:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import mysql from "mysql2/promise";
import bcrypt from "bcrypt";

// Create a connection to your MySQL database
const db = await mysql.createConnection({
  host: 'localhost',      // Update with your MySQL host
  user: 'root',           // Update with your MySQL username
  password: '',           // Update with your MySQL password
  database: 'rayat',      // Update with your database name
});

export async function POST(req) {
  const { email, password } = await req.json();

  try {
    // Query to fetch user by email
    const [rows] = await db.execute(
      "SELECT id, school_id, email, password FROM users WHERE email = ?",
      [email]
    );

    // Check if user exists
    if (rows.length === 0) {
      return new Response(
        JSON.stringify({ success: false, message: "Invalid email or password" }),
        { status: 400 }
      );
    }

    const user = rows[0];

    // Compare the provided password with the stored hashed password
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return new Response(
        JSON.stringify({ success: false, message: "Invalid email or password" }),
        { status: 400 }
      );
    }

    // If credentials are correct, return success and user data
    return new Response(
      JSON.stringify({
        success: true,
        userId: user.id,
        username: user.username,
      }),
      { status: 200 }
    );
  } catch (error) {
    console.error("Error during login:", error);
    return new Response(
      JSON.stringify({ success: false, message: "An error occurred" }),
      { status: 500 }
    );
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

schoolinfo page

"use client";
import Link from "next/link";
import { useRef, useState, useEffect } from "react";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

export default function SchoolInformation({ schoolName }) {
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [gallery, setGallery] = useState([
    { file_path: "/images/gallery/image1.jpg", title: "Image 1" },
    { file_path: "/images/gallery/image2.jpg", title: "Image 2" },
    { file_path: "/images/gallery/image3.jpg", title: "Image 3" },
    { file_path: "/images/gallery/image4.jpg", title: "Image 4" },
    { file_path: "/images/gallery/image5.jpg", title: "Image 5" },
    { file_path: "/images/gallery/image6.jpg", title: "Image 6" },
  ]);
  const [selectedImage, setSelectedImage] = useState(null);

  useEffect(() => {
    const fetchSchoolInfo = async () => {
      try {
        const response = await fetch("/api/getSchoolInfo");
        const data = await response.json();
        setSchoolInfo(data);
      } catch (error) {
        console.error("Error fetching school info:", error);
      }
    };

    const fetchActivitiesAndEvents = async () => {
      try {
        const [activitiesRes, eventsRes] = await Promise.all([
          fetch("/api/getSchoolActivity"),
          fetch("/api/getSchoolEvents"),
        ]);
        
        const activitiesData = await activitiesRes.json();
        const eventsData = await eventsRes.json();

        setActivities(activitiesData);
        setEvents(eventsData);
      } catch (error) {
        console.error("Error fetching activities and events:", error);
      }
    };

    fetchSchoolInfo();
    fetchActivitiesAndEvents();
  }, []);

  return (
    <div className="bg-gray-50 py-10 px-4 relative z-10">
      {/* Hero Section */}
      <div
        className="relative bg-cover bg-center h-72 flex flex-col items-center justify-center text-black text-center shadow-lg overflow-hidden"
        style={{ backgroundImage: "url('/school-banner.jpg')" }}
      >
        <div className="absolute inset-0 bg-gray-400 bg-opacity-50"></div>
        <h1 className="text-5xl font-extrabold uppercase drop-shadow-lg relative z-10">
          {schoolInfo?.school_name || "Loading..."}
        </h1>
        <p className="mt-2 text-lg relative z-10">
          Principal: {schoolInfo?.principal_name || "N/A"} | Vice Principal: {schoolInfo?.vice_principal_name || "N/A"}
        </p>
        <p className="text-md relative z-10">
          Contact: {schoolInfo?.contact || "N/A"} | Email: {schoolInfo?.email || "N/A"}
        </p>
      </div>

      {/* Activities Section */}
      <div className="max-w-6xl mx-auto mb-10 mt-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Recent Activities</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {activities.length > 0 ? (
            activities.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No recent activities available.</p>
          )}
        </div>
      </div>

      {/* Events Section */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">School Events</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {events.length > 0 ? (
            events.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No events available.</p>
          )}
        </div>
      </div>

      {/* Gallery Section */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Gallery</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {gallery.map((image, idx) => (
            <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(image.file_path)}>
              <img src={image.file_path} alt={image.title} className="w-full h-48 object-cover rounded-lg" />
            </div>
          ))}
        </div>
      </div>

      {/* Modal for Selected Image */}
      {selectedImage && (
        <div className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-70" onClick={() => setSelectedImage(null)}>
          <div className="relative bg-white p-4 rounded-lg shadow-lg max-w-3xl w-full" onClick={(e) => e.stopPropagation()}>
            <button className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300" onClick={() => setSelectedImage(null)}>
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img src={selectedImage} alt="Selected" className="w-full h-auto max-h-[80vh] object-contain rounded-lg" />
          </div>
        </div>
      )}
    </div>
  );
}
//////////////////////////////////////////////////////////////////////////////////


getSchoolInfo/route.js

import { NextResponse } from "next/server";
import mysql from "mysql2/promise";

const pool = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "",
  database: "rayat",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

export async function GET() {
  try {
    const [rows] = await pool.execute(
      "SELECT id,  principal_name, vice_principal_name, contact, email, created_at FROM schoolinfo LIMIT 1"
    );

    return NextResponse.json(rows.length > 0 ? rows[0] : {}, { status: 200 });
  } catch (error) {
    console.error("Error fetching school info:", error);
    return NextResponse.json(
      { error: "Failed to fetch school information" },
      { status: 500 }
    );
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////

schoolinfo page updated

"use client";

import { useState, useEffect } from "react";

export default function SchoolInformation() {
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [gallery, setGallery] = useState([
    { file_path: "/images/gallery/image1.jpg", title: "Image 1" },
    { file_path: "/images/gallery/image2.jpg", title: "Image 2" },
    { file_path: "/images/gallery/image3.jpg", title: "Image 3" },
    { file_path: "/images/gallery/image4.jpg", title: "Image 4" },
    { file_path: "/images/gallery/image5.jpg", title: "Image 5" },
    { file_path: "/images/gallery/image6.jpg", title: "Image 6" },
  ]);
  const [news, setNews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchSchoolInfo = async () => {
      try {
        const response = await fetch("/api/getSchoolInfo");
        const data = await response.json();
        if (response.ok) setSchoolInfo(data);
      } catch (error) {
        console.error("Error fetching school info:", error);
      }
    };

    const fetchNews = async () => {
      try {
        const response = await fetch("/api/getSchoolNews");
        const data = await response.json();
        if (response.ok) setNews(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    const fetchActivitiesAndEvents = async () => {
      try {
        const [activitiesRes, eventsRes] = await Promise.all([
          fetch("/api/getSchoolActivity"),
          fetch("/api/getSchoolEvents"),
        ]);
        const activitiesData = await activitiesRes.json();
        const eventsData = await eventsRes.json();
        setActivities(activitiesData);
        setEvents(eventsData);
      } catch (error) {
        console.error("Error fetching activities and events:", error);
      }
    };

    fetchSchoolInfo();
    fetchNews();
    fetchActivitiesAndEvents();
  }, []);

  return (
    <div className="bg-gray-50 py-10 px-4">
      {/* School Info Section */}
      <div className="text-center mb-8">
        <h1 className="text-5xl font-extrabold uppercase">{schoolInfo?.school_name || "Loading..."}</h1>
        <p className="mt-2 text-lg">Principal: {schoolInfo?.principal_name || "N/A"}</p>
        <p className="text-md">Contact: {schoolInfo?.contact || "N/A"}</p>
      </div>

      {/* News Section */}
      <div className="max-w-6xl mx-auto p-6 bg-white shadow-lg rounded-lg">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">School News</h2>
        {loading ? (
          <p className="text-gray-500 text-center">Loading...</p>
        ) : error ? (
          <p className="text-red-500 text-center">{error}</p>
        ) : news.length === 0 ? (
          <p className="text-gray-500 text-center">No news available.</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border border-gray-300 rounded-lg">
              <thead>
                <tr className="bg-gray-200">
                  <th className="py-2 px-4 border">Title</th>
                  <th className="py-2 px-4 border">Date</th>
                  <th className="py-2 px-4 border">File</th>
                  <th className="py-2 px-4 border">Status</th>
                </tr>
              </thead>
              <tbody>
                {news.map((item) => (
                  <tr key={item.id} className="border-t">
                    <td className="py-2 px-4 border">{item.title}</td>
                    <td className="py-2 px-4 border">{item.date}</td>
                    <td className="py-2 px-4 border">
                      {item.file_path ? (
                        <a href={item.file_path} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">View File</a>
                      ) : ("No File")}
                    </td>
                    <td className="py-2 px-4 border">
                      {item.verify === "1" ? (<span className="text-green-600 font-semibold">Verified</span>) : (<span className="text-red-600 font-semibold">Pending</span>)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Activities Section */}
      <div className="max-w-6xl mx-auto mb-10 mt-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Recent Activities</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {activities.map((item, idx) => (
            <div key={idx} className="bg-white shadow-xl rounded-lg p-4">
              <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
              <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
            </div>
          ))}
        </div>
      </div>

      {/* Events Section */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">School Events</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {events.map((item, idx) => (
            <div key={idx} className="bg-white shadow-xl rounded-lg p-4">
              <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
              <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


schoolinfo page 

"use client";
import Link from "next/link";
import { useRef, useState, useEffect } from "react";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

export default function SchoolInformation({ schoolName }) {
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [gallery, setGallery] = useState([
    { file_path: "/images/gallery/image1.jpg", title: "Image 1" },
    { file_path: "/images/gallery/image2.jpg", title: "Image 2" },
    { file_path: "/images/gallery/image3.jpg", title: "Image 3" },
    { file_path: "/images/gallery/image4.jpg", title: "Image 4" },
    { file_path: "/images/gallery/image5.jpg", title: "Image 5" },
    { file_path: "/images/gallery/image6.jpg", title: "Image 6" },
  ]);
  const [selectedImage, setSelectedImage] = useState(null);

  useEffect(() => {
    const fetchSchoolInfo = async () => {
      try {
        const response = await fetch("/api/getSchoolInfo");
        const data = await response.json();
    
        console.log("Fetched School Info:", data); // Debugging
    
        if (response.ok) {
          setSchoolInfo(data);
        } else {
          console.error("Error:", data.error);
        }
      } catch (error) {
        console.error("Error fetching school info:", error);
      }
    };
    
    

    const fetchActivitiesAndEvents = async () => {
      try {
        const [activitiesRes, eventsRes] = await Promise.all([
          fetch("/api/getSchoolActivity"),
          fetch("/api/getSchoolEvents"),
        ]);
        
        const activitiesData = await activitiesRes.json();
        const eventsData = await eventsRes.json();

        setActivities(activitiesData);
        setEvents(eventsData);
      } catch (error) {
        console.error("Error fetching activities and events:", error);
      }
    };

    fetchSchoolInfo();
    fetchActivitiesAndEvents();
  }, []);

  return (
    <div className="bg-gray-50 py-10 px-4 relative z-10">
      {/* Hero Section */}
      <div
        className="relative bg-cover bg-center h-72 flex flex-col items-center justify-center text-black text-center shadow-lg overflow-hidden"
        style={{ backgroundImage: "url('/school-banner.jpg')" }}
      >
        <div className="absolute inset-0 bg-gray-400 bg-opacity-50"></div>
        <h1 className="text-5xl font-extrabold uppercase drop-shadow-lg relative z-10">
          {schoolInfo?.school_name || "Loading..."}
        </h1>
        <p className="mt-2 text-lg relative z-10">
          Principal: {schoolInfo?.principal_name || "N/A"} | Vice Principal: {schoolInfo?.vice_principal_name || "N/A"}
        </p>
        <p className="text-md relative z-10">
          Contact: {schoolInfo?.contact || "N/A"} | Email: {schoolInfo?.email || "N/A"}
        </p>
      </div>

      {/* Activities Section */}
      <div className="max-w-6xl mx-auto mb-10 mt-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Recent Activities</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {activities.length > 0 ? (
            activities.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No recent activities available.</p>
          )}
        </div>
      </div>

      {/* Events Section */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">School Events</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {events.length > 0 ? (
            events.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No events available.</p>
          )}
        </div>
      </div>

      {/* Gallery Section */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Gallery</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {gallery.map((image, idx) => (
            <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(image.file_path)}>
              <img src={image.file_path} alt={image.title} className="w-full h-48 object-cover rounded-lg" />
            </div>
          ))}
        </div>
      </div>

      {/* Modal for Selected Image */}
      {selectedImage && (
        <div className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-70" onClick={() => setSelectedImage(null)}>
          <div className="relative bg-white p-4 rounded-lg shadow-lg max-w-3xl w-full" onClick={(e) => e.stopPropagation()}>
            <button className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300" onClick={() => setSelectedImage(null)}>
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img src={selectedImage} alt="Selected" className="w-full h-auto max-h-[80vh] object-contain rounded-lg" />
          </div>
        </div>
      )}
    </div>
  );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////


adminschoolnews page

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Trash2, Eye, CheckCircle } from "lucide-react";
import Swal from "sweetalert2";
import Sidebar from "../components/Sidebar";
import Topbar from "../components/Topbar";

export default function ManageNews() {
  const router = useRouter();
  const [newsList, setNewsList] = useState([]);

  // Fetch news with school names
  const fetchNews = async () => {
    try {
      const response = await fetch("/api/getSchoolNews");
      const data = await response.json();
      setNewsList(data);
    } catch (error) {
      console.error("Failed to fetch news:", error);
    }
  };

  useEffect(() => {
    fetchNews();
  }, []);

  // Handle delete news
  const handleDelete = async (id) => {
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "This news will be deleted permanently!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, delete it!",
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/deleteSchoolNews?id=${id}`, { method: "DELETE" });
        if (response.ok) {
          setNewsList(newsList.filter((news) => news.id !== id));
          Swal.fire("Deleted!", "The news has been deleted.", "success");
        } else {
          Swal.fire("Error", "Failed to delete news.", "error");
        }
      } catch (error) {
        console.error("Error deleting news:", error);
        Swal.fire("Error", "Something went wrong!", "error");
      }
    }
  };

  // Handle approve news
  const handleApprove = async (id) => {
    try {
      const response = await fetch(`/api/approveSchoolNews?id=${id}`, { method: "PUT" });
      if (response.ok) {
        setNewsList(newsList.map((news) => (news.id === id ? { ...news, approved: 1 } : news)));
        Swal.fire("Approved!", "The news has been approved.", "success");
      } else {
        Swal.fire("Error", "Failed to approve news.", "error");
      }
    } catch (error) {
      console.error("Error approving news:", error);
      Swal.fire("Error", "Something went wrong!", "error");
    }
  };

  // Handle view file
  const handleViewFile = (filePath) => {
    window.open(filePath, "_blank");
  };

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="flex-1 p-8 space-y-6">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">News List</h2>
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-300 px-4 py-2">School Name</th>
                  <th className="border border-gray-300 px-4 py-2">Title</th>
                  <th className="border border-gray-300 px-4 py-2">Date</th>
                  <th className="border border-gray-300 px-4 py-2">Actions</th>
                  <th className="border border-gray-300 px-4 py-2">Approved</th>
                </tr>
              </thead>
              <tbody>
                {newsList.length > 0 ? (
                  newsList.map((news) => (
                    <tr key={news.id} className="text-center">
                      <td className="border border-gray-300 px-4 py-2">{news.school_name}</td>
                      <td className="border border-gray-300 px-4 py-2">{news.title}</td>
                      <td className="border border-gray-300 px-4 py-2">{news.date}</td>
                      <td className="border border-gray-300 px-4 py-2 flex justify-center gap-4">
                        {news.file_path && (
                          <button
                            onClick={() => handleViewFile(news.file_path)}
                            className="text-green-500 hover:text-green-700"
                          >
                            <Eye size={30} />
                          </button>
                        )}
                        <button
                          onClick={() => handleDelete(news.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Trash2 size={30} />
                        </button>
                      </td>
                      <td className="border border-gray-300 px-4 py-2">
                        {news.approved ? (
                          <span className="text-green-600 font-semibold">Approved</span>
                        ) : (
                          <button
                            onClick={() => handleApprove(news.id)}
                            className="bg-blue-500 text-white px-3 py-1 rounded-lg hover:bg-blue-700"
                          >
                           Not Approve
                          </button>
                        )}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="5" className="text-center py-4 text-gray-500">No news available.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </main>
      </div>
    </div>
  );
}
/////////////////////////////////////////////////////////////////////////////////////////////////////

getSchoolNews code


import { NextResponse } from "next/server";
import mysql from "mysql2/promise";

// Database Connection
const db = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "",
  database: "rayat",
});

export async function GET() {
  try {
    const [rows] = await db.query(`
      SELECT 
        sn.id, 
        sn.title, 
        sn.date, 
        sn.file_path, 
        s.name AS school_name
      FROM schoolnews sn
      JOIN school s ON sn.school_id = s.school_id
    `);

    return NextResponse.json(rows);
  } catch (error) {
    console.error("Database Error:", error);
    return NextResponse.json({ error: "Failed to fetch news" }, { status: 500 });
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

adminschoolnews page


"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Trash2, Eye } from "lucide-react";
import Swal from "sweetalert2";
import Sidebar from "../components/Sidebar";
import Topbar from "../components/Topbar";

export default function ManageNews() {
  const router = useRouter();
  const [newsList, setNewsList] = useState([]);
  const [statusFilter, setStatusFilter] = useState("all");

  // Fetch news with school names
  const fetchNews = async () => {
    try {
      const response = await fetch("/api/getAdminSchoolNews");
      const data = await response.json();
      setNewsList(data);
    } catch (error) {
      console.error("Failed to fetch news:", error);
    }
  };

  useEffect(() => {
    fetchNews();
  }, []);

  // Handle delete news
  const handleDelete = async (id) => {
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "This news will be deleted permanently!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, delete it!",
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch(`/api/deleteSchoolNews?id=${id}`, { method: "DELETE" });
        if (response.ok) {
          setNewsList(newsList.filter((news) => news.id !== id));
          Swal.fire("Deleted!", "The news has been deleted.", "success");
        } else {
          Swal.fire("Error", "Failed to delete news.", "error");
        }
      } catch (error) {
        console.error("Error deleting news:", error);
        Swal.fire("Error", "Something went wrong!", "error");
      }
    }
  };

  // Handle approve news
  const handleApprove = async (id) => {
    try {
      const response = await fetch(`/api/approveSchoolNews?id=${id}`, { method: "PUT" });
      if (response.ok) {
        setNewsList(newsList.map((news) => (news.id === id ? { ...news, verify: 1 } : news)));
        Swal.fire("Approved!", "The news has been approved.", "success");
      } else {
        Swal.fire("Error", "Failed to approve news.", "error");
      }
    } catch (error) {
      console.error("Error approving news:", error);
      Swal.fire("Error", "Something went wrong!", "error");
    }
  };

  // Handle view file
  const handleViewFile = (filePath) => {
    window.open(filePath, "_blank");
  };

  // Filtered news based on dropdown
  const filteredNews = newsList.filter((news) => {
    if (statusFilter === "approved") return news.verify === 1;
    if (statusFilter === "not_approved") return news.verify === 0;
    return true; // for "all"
  });

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="flex-1 p-8 space-y-6">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold text-gray-800">News List</h2>
              <select
  value={statusFilter}
  onChange={(e) => setStatusFilter(e.target.value)}
  className="px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-700"
>
  <option value="all">All</option>
  <option value="approved">Approved</option>
  <option value="not_approved">Not Approved</option>
</select>

            </div>
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-300 px-4 py-2">School Name</th>
                  <th className="border border-gray-300 px-4 py-2">Title</th>
                  <th className="border border-gray-300 px-4 py-2">Date</th>
                  <th className="border border-gray-300 px-4 py-2">Actions</th>
                  <th className="border border-gray-300 px-4 py-2">Status</th>
                </tr>
              </thead>
              <tbody>
                {filteredNews.length > 0 ? (
                  filteredNews.map((news) => (
                    <tr key={news.id} className="text-center">
                      <td className="border border-gray-300 px-4 py-2">{news.school_name}</td>
                      <td className="border border-gray-300 px-4 py-2">{news.title}</td>
                      <td className="border border-gray-300 px-4 py-2">{news.date}</td>
                      <td className="border border-gray-300 px-4 py-2 flex justify-center gap-4">
                        {news.file_path && (
                          <button
                            onClick={() => handleViewFile(news.file_path)}
                            className="text-green-500 hover:text-green-700"
                          >
                            <Eye size={30} />
                          </button>
                        )}
                        <button
                          onClick={() => handleDelete(news.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Trash2 size={30} />
                        </button>
                      </td>
                      <td className="border border-gray-300 px-4 py-2">
                        {news.verify ? (
                          <span className="text-green-600 font-semibold">Approved</span>
                        ) : (
                          <button
                            onClick={() => handleApprove(news.id)}
                            className="bg-blue-500 text-white px-3 py-1 rounded-lg hover:bg-blue-700"
                          >
                            Not Approved
                          </button>
                        )}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="5" className="text-center py-4 text-gray-500">No news available.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </main>
      </div>
    </div>
  );
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

school-info


"use client";
import { useParams } from "next/navigation";
import { useEffect, useState } from "react";
import { X } from "lucide-react";

export default function SchoolInformation() {
  const { school_id } = useParams();
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [gallery, setGallery] = useState([
    { file_path: "/images/gallery/image1.jpg", title: "Image 1" },
    { file_path: "/images/gallery/image2.jpg", title: "Image 2" },
    { file_path: "/images/gallery/image3.jpg", title: "Image 3" },
    { file_path: "/images/gallery/image4.jpg", title: "Image 4" },
    { file_path: "/images/gallery/image5.jpg", title: "Image 5" },
    { file_path: "/images/gallery/image6.jpg", title: "Image 6" },
  ]);
  const [selectedImage, setSelectedImage] = useState(null);

  useEffect(() => {
    const fetchSchoolInfo = async () => {
      try {
        const response = await fetch(`/api/getSchoolInfo?school_id=${school_id}`);
        const data = await response.json();
        if (response.ok) {
          setSchoolInfo(data);
        } else {
          console.error("Error:", data.error);
        }
      } catch (error) {
        console.error("Error fetching school info:", error);
      }
    };

    const fetchActivitiesAndEvents = async () => {
      try {
        const [activitiesRes, eventsRes] = await Promise.all([
          fetch(`/api/getSchoolActivity?school_id=${school_id}`),
          fetch(`/api/getSchoolEvents?school_id=${school_id}`),
        ]);

        const activitiesData = await activitiesRes.json();
        const eventsData = await eventsRes.json();

        setActivities(activitiesData);
        setEvents(eventsData);
      } catch (error) {
        console.error("Error fetching activities and events:", error);
      }
    };

    if (school_id) {
      fetchSchoolInfo();
      fetchActivitiesAndEvents();
    }
  }, [school_id]);

  return (
    <div className="bg-gray-50 py-10 px-4 relative z-10">
      {/* Hero */}
      <div
        className="relative bg-cover bg-center h-72 flex flex-col items-center justify-center text-black text-center shadow-lg overflow-hidden"
        style={{ backgroundImage: "url('/school-banner.jpg')" }}
      >
        <div className="absolute inset-0 bg-gray-400 bg-opacity-50"></div>
        <h1 className="text-5xl font-extrabold uppercase drop-shadow-lg relative z-10">
          {schoolInfo?.school_name || "Loading..."}
        </h1>
        <p className="mt-2 text-lg relative z-10">
          Principal: {schoolInfo?.principal_name || "N/A"} | Vice Principal: {schoolInfo?.vice_principal_name || "N/A"}
        </p>
        <p className="text-md relative z-10">
          Contact: {schoolInfo?.contact || "N/A"} | Email: {schoolInfo?.email || "N/A"}
        </p>
      </div>

      {/* Activities */}
      <div className="max-w-6xl mx-auto mb-10 mt-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Recent Activities</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {activities.length > 0 ? (
            activities.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No recent activities available.</p>
          )}
        </div>
      </div>

      {/* Events */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">School Events</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {events.length > 0 ? (
            events.map((item, idx) => (
              <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(item.file_path)}>
                <img src={item.file_path} alt={item.title} className="w-full h-48 object-cover rounded-lg" />
                <h3 className="text-center mt-4 font-semibold text-lg text-gray-800">{item.title}</h3>
              </div>
            ))
          ) : (
            <p className="text-gray-500 text-center w-full">No events available.</p>
          )}
        </div>
      </div>

      {/* Gallery */}
      <div className="max-w-6xl mx-auto mb-10">
        <h2 className="text-3xl font-bold text-gray-800 mb-6">Gallery</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {gallery.map((image, idx) => (
            <div key={idx} className="bg-white shadow-xl rounded-lg overflow-hidden p-4 hover:scale-105 cursor-pointer" onClick={() => setSelectedImage(image.file_path)}>
              <img src={image.file_path} alt={image.title} className="w-full h-48 object-cover rounded-lg" />
            </div>
          ))}
        </div>
      </div>

      {/* Modal for Selected Image */}
      {selectedImage && (
        <div className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-70" onClick={() => setSelectedImage(null)}>
          <div className="relative bg-white p-4 rounded-lg shadow-lg max-w-3xl w-full" onClick={(e) => e.stopPropagation()}>
            <button className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300" onClick={() => setSelectedImage(null)}>
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img src={selectedImage} alt="Selected" className="w-full h-auto max-h-[80vh] object-contain rounded-lg" />
          </div>
        </div>
      )}
    </div>
  );
}
 

 school-info page



 "use client";
import { useEffect, useState } from "react";
import SchoolSlider from "../../components/SchoolSlider";
import RecentSchoolActivities from "../../components/RecentSchoolActivities";
import SchoolEvents from "../../components/SchoolEvents";
import { useParams } from "next/navigation";
import { X } from "lucide-react";
import { useRouter } from "next/navigation";
import Image from "next/image";

export default function SchoolInformation() {
  const { school_id } = useParams();
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [news, setNews] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);

  useEffect(() => {
    if (!school_id) return;

    const fetchData = async () => {
      try {
        const infoRes = await fetch(`/api/getSchoolInfo?school_id=${school_id}`);
        const infoData = await infoRes.json();
        setSchoolInfo(infoData);

        const [activitiesRes, eventsRes, newsRes] = await Promise.all([
          fetch(`/api/getSchoolActivity?school_id=${school_id}`),
          fetch(`/api/getSchoolEvents?school_id=${school_id}`),
          fetch(`/api/getSchoolNews?school_id=${school_id}`),
        ]);

        setActivities(await activitiesRes.json());
        setEvents(await eventsRes.json());
        setNews(await newsRes.json());
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, [school_id]);

  return (
    <div className="bg-gray-50 py-6 px-4">
      {/* Header Section */}
      <div className="bg-white w-full">
        <div className="flex items-center justify-between p-6 max-w-screen-xl mx-auto shadow-md">
          <img src="/images/rayat.png" alt="Rayat Logo" width={80} height={80} />
          <div className="text-center">
            <h1 className="text-4xl font-extrabold tracking-wide">
              {schoolInfo?.school_name || "Loading..."}
            </h1>
            <p className="mt-2 text-lg relative z-10">
              Principal: {schoolInfo?.principal_name || "N/A"} | Vice Principal:{" "}
              {schoolInfo?.vice_principal_name || "N/A"}
            </p>
            <p className="text-md relative z-10">
              Contact: {schoolInfo?.contact || "N/A"} | Email: {schoolInfo?.email || "N/A"}
            </p>
          </div>
          <img src="/images/kbp.png" alt="KBP Logo" width={80} height={80} />
        </div>
      </div>
      <SchoolSlider school_id={school_id} />

      <br />
      <br />

      {/* News Section */}
      <div className="max-w-4xl mx-auto mb-16">
        <div className="flex items-center justify-center w-full mb-5">
          <hr className="border border-black w-1/4" />
          <Image src="/images/logohr.png" alt="logo" width={60} height={50} className="mx-4" />
          <hr className="border border-black w-1/4" />
        </div>
        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-800">News</h2>
            <button className="bg-teal-600 hover:bg-teal-700 text-white text-sm font-semibold px-4 py-2 rounded-md">
              VIEW ALL
            </button>
          </div>

          <div className="relative max-h-48 overflow-hidden">
            <div className="scroll-container">
              <div className="scroll-content space-y-4">
                {news.length > 0 ? (
                  [...news, ...news].map((item, idx) => (
                    <div
                      key={idx}
                      className="flex justify-between items-center bg-gray-50 p-4 rounded-lg shadow-sm cursor-pointer hover:bg-gray-100 transition"
                      onClick={() => setSelectedImage(item.file_path)}
                    >
                      <span className="text-gray-700 font-medium">{item.title}</span>
                      <div className="flex items-center gap-3">
                        <img src="/notice-icon.png" alt="icon" className="w-5 h-5" />
                        {item.pdf && (
                          <a
                            href={item.pdf}
                            download
                            onClick={(e) => e.stopPropagation()}
                            className="text-teal-900 hover:text-blue-700 text-lg"
                            title="Download PDF"
                          >
                            📥
                          </a>
                        )}
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 text-center text-sm">No news available.</p>
                )}
              </div>
            </div>
          </div>
        </div>

        <style jsx>{`
          .scroll-container {
            position: relative;
            height: 12rem;
            overflow: hidden;
          }
          .scroll-content {
            display: flex;
            flex-direction: column;
            animation: scrollUp 10s linear infinite;
          }
          .scroll-container:hover .scroll-content {
            animation-play-state: paused;
          }
          @keyframes scrollUp {
            from {
              transform: translateY(0);
            }
            to {
              transform: translateY(-50%);
            }
          }
        `}</style>
      </div>

      <RecentSchoolActivities activities={activities} onImageClick={setSelectedImage} />
      <br />
      <SchoolEvents events={events} onImageClick={setSelectedImage} />

      {/* Image Modal */}
      {selectedImage && (
        <div
          className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-70 z-50"
          onClick={() => setSelectedImage(null)}
        >
          <div
            className="relative bg-white p-4 rounded-lg shadow-lg max-w-3xl w-full"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300"
              onClick={() => setSelectedImage(null)}
            >
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img
              src={selectedImage}
              alt="Selected"
              className="w-full h-auto max-h-[80vh] object-contain rounded-lg"
            />
          </div>
        </div>
      )}
    </div>
  );
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


schoolslider code

"use client";

import { useEffect, useState } from "react";
import Image from "next/image";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";

const SchoolSlider = ({ school_id }) => {
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!school_id) return;

    const fetchImages = async () => {
      try {
        const res = await fetch(`/api/getSliderSchoolImages?school_id=${school_id}`);
        if (!res.ok) throw new Error("Failed to fetch images");
        const data = await res.json();
        setImages(data);
      } catch (error) {
        console.error("Error fetching slider images:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchImages();
  }, [school_id]);

  if (loading) {
    return <p className="text-center text-gray-500">Loading slider...</p>;
  }

  // If no images are available for this school, do not render the slider.
  if (images.length === 0) {
    return <p className="text-center text-gray-500">No slider images available for this school.</p>;
  }

  return (
    <div className="relative w-full min-h-[400px] md:h-[600px] lg:h-[700px] flex items-center justify-center overflow-hidden">
      <Swiper
        modules={[Navigation, Pagination, Autoplay]}
        spaceBetween={0}
        slidesPerView={1}
        navigation
        pagination={{ clickable: true }}
        loop
        autoplay={{ delay: 5000, disableOnInteraction: false }}
        className="w-full h-full"
      >
        {images.map((image, index) => (
          <SwiperSlide key={image.id} className="relative w-full h-full">
            <div className="relative w-full h-[400px] md:h-[600px] lg:h-[700px] before:absolute before:inset-0 before:bg-white/10">
              <Image
                src={image.file_path}
                alt={`Slide ${index + 1}`}
                layout="fill"
                objectFit="cover"
                className="brightness-110 contrast-105"
                priority={index === 0}
              />
            </div>
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  );
};

export default SchoolSlider;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { X } from "lucide-react";
import Image from "next/image";
import SchoolSlider from "../../components/SchoolSlider";
import RecentSchoolActivities from "../../components/RecentSchoolActivities";
import SchoolEvents from "../../components/SchoolEvents";

export default function SchoolInformation() {
  const { school_id } = useParams();
  const [schoolInfo, setSchoolInfo] = useState(null);
  const [activities, setActivities] = useState([]);
  const [events, setEvents] = useState([]);
  const [news, setNews] = useState([]);
  const [loggedInSchoolNews, setLoggedInSchoolNews] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);

  useEffect(() => {
    if (!school_id) return;

    const fetchData = async () => {
      try {
        const infoRes = await fetch(`/api/getSchoolInfo?school_id=${school_id}`);
        const infoData = await infoRes.json();
        setSchoolInfo(infoData);

        const [activitiesRes, eventsRes, newsRes, loggedInNewsRes] = await Promise.all([
          fetch(`/api/getSchoolActivity?school_id=${school_id}`),
          fetch(`/api/getSchoolEvents?school_id=${school_id}`),
          fetch(`/api/getSchoolNews?school_id=${school_id}`),
          fetch(`/api/getLoggedInSchoolNews`), // NEW API for logged-in school news
        ]);

        const activitiesData = await activitiesRes.json();
        const eventsData = await eventsRes.json();
        const newsData = await newsRes.json();
        const loggedInNewsData = await loggedInNewsRes.json();

        setActivities(Array.isArray(activitiesData) ? activitiesData : []);
        setEvents(Array.isArray(eventsData) ? eventsData : []);
        setNews(Array.isArray(newsData) ? newsData : []);
        setLoggedInSchoolNews(Array.isArray(loggedInNewsData) ? loggedInNewsData : []);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, [school_id]);

  return (
    <div className="bg-gray-50 py-4 px-4">
      {/* Header Section */}
      <div className="w-full bg-gradient-to-r from-blue-100 via-white to-blue-100">
        <div className="relative max-w-screen-xl mx-auto flex flex-col sm:flex-row items-center justify-between px-6 py-6 shadow-md overflow-hidden">
          <div className="absolute inset-0 bg-[url('/images/hexpattern.png')] bg-right bg-no-repeat opacity-10 pointer-events-none" />
          <img src="/images/rayat.png" alt="Rayat Logo" className="w-20 h-20 z-10 mb-4 sm:mb-0" />
          <div className="text-center z-10 space-y-1">
            <h1 className="text-3xl sm:text-4xl font-extrabold text-blue-900 tracking-wide drop-shadow-sm">
              {schoolInfo?.school_name || "Loading..."}
            </h1>
            <p className="text-base sm:text-lg text-gray-700">
              Principal: <span className="font-medium">{schoolInfo?.principal_name || "N/A"}</span> |
              Vice Principal: <span className="font-medium">{schoolInfo?.vice_principal_name || "N/A"}</span>
            </p>
            <p className="text-sm sm:text-md text-gray-600">
              Contact: {schoolInfo?.contact || "N/A"} | Email: {schoolInfo?.email || "N/A"}
            </p>
          </div>
          <img src="/images/kbp.png" alt="KBP Logo" className="w-20 h-20 z-10 mt-4 sm:mt-0" />
        </div>
      </div>

      {/* School Slider */}
      <SchoolSlider school_id={school_id} />

      <br />
      <br />

      {/* News Section */}
      <div className="max-w-4xl mx-auto mb-16">
        <div className="flex items-center justify-center w-full mb-5">
          <hr className="border border-black w-1/4" />
          <Image src="/images/logohr.png" alt="logo" width={60} height={50} className="mx-4" />
          <hr className="border border-black w-1/4" />
        </div>

        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-800">News</h2>
            <button className="bg-teal-600 hover:bg-teal-700 text-white text-sm font-semibold px-4 py-2 rounded-md">
              VIEW ALL
            </button>
          </div>

          <div className="relative max-h-48 overflow-hidden">
            <div className="scroll-container">
              <div className="scroll-content space-y-4">
                {/* Current School News */}
                {news.length > 0 ? (
                  news.map((item, idx) => (
                    <div
                      key={idx}
                      className="flex justify-between items-center bg-gray-50 p-4 rounded-lg shadow-sm cursor-pointer hover:bg-gray-100 transition"
                      onClick={() => setSelectedImage(item.file_path)}
                    >
                      <span className="text-gray-700 font-medium">{item.title}</span>
                      <div className="flex items-center gap-3">
                        <img src="/notice-icon.png" alt="icon" className="w-5 h-5" />
                        {item.pdf && (
                          <a
                            href={item.pdf}
                            download
                            onClick={(e) => e.stopPropagation()}
                            className="text-teal-900 hover:text-blue-700 text-lg"
                            title="Download PDF"
                          >
                            📥
                          </a>
                        )}
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500 text-center text-sm">No news available for this school.</p>
                )}

                {/* Logged-In School News */}
                {loggedInSchoolNews.length > 0 && (
                  <>
                    <hr className="my-4 border-t border-gray-300" />
                    <h3 className="text-lg font-semibold text-teal-800 mb-2">Logged-In School News</h3>
                    {loggedInSchoolNews.map((item, idx) => (
                      <div
                        key={`logged-${idx}`}
                        className="flex justify-between items-center bg-gray-50 p-4 rounded-lg shadow-sm cursor-pointer hover:bg-gray-100 transition"
                        onClick={() => setSelectedImage(item.file_path)}
                      >
                        <span className="text-gray-700 font-medium">{item.title}</span>
                        <div className="flex items-center gap-3">
                          <img src="/notice-icon.png" alt="icon" className="w-5 h-5" />
                          {item.pdf && (
                            <a
                              href={item.pdf}
                              download
                              onClick={(e) => e.stopPropagation()}
                              className="text-teal-900 hover:text-blue-700 text-lg"
                              title="Download PDF"
                            >
                              📥
                            </a>
                          )}
                        </div>
                      </div>
                    ))}
                  </>
                )}
              </div>
            </div>
          </div>

          {/* Scroll Animation */}
          <style jsx>{`
            .scroll-container {
              position: relative;
              height: 12rem;
              overflow: hidden;
            }
            .scroll-content {
              display: flex;
              flex-direction: column;
              animation: scrollUp 15s linear infinite;
            }
            .scroll-container:hover .scroll-content {
              animation-play-state: paused;
            }
            @keyframes scrollUp {
              0% {
                transform: translateY(0);
              }
              100% {
                transform: translateY(-50%);
              }
            }
          `}</style>
        </div>
      </div>

      {/* Activities and Events */}
      <RecentSchoolActivities activities={activities} onImageClick={setSelectedImage} />
      <br />
      <SchoolEvents events={events} onImageClick={setSelectedImage} />

      {/* Image Modal */}
      {selectedImage && (
        <div
          className="fixed inset-0 flex justify-center items-center bg-black bg-opacity-70 z-50"
          onClick={() => setSelectedImage(null)}
        >
          <div
            className="relative bg-white p-4 rounded-lg shadow-lg max-w-3xl w-full"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              className="absolute top-3 right-3 bg-gray-200 p-2 rounded-full hover:bg-gray-300"
              onClick={() => setSelectedImage(null)}
            >
              <X className="w-6 h-6 text-gray-800" />
            </button>
            <img
              src={selectedImage}
              alt="Selected"
              className="w-full h-auto max-h-[80vh] object-contain rounded-lg"
            />
          </div>
        </div>
      )}
    </div>
  );
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Gallery component


import React from 'react';
import Image from 'next/image';

const Gallery = () => {
  const designData = [
    { name: 'Hon’ble Sharadrao Govindrao Pawar', title: 'President', image: '/images/SP.jpg' },
    { name: 'Hon’ble Chandrakant Narayan Dalvi, IAS (Retd)', title: 'Chairman', image: '/images/chairman1.jpg' },
    { name: 'Hon’ble Adv. Bhagirath Nivrutti Shinde', title: 'Vice Chairman', image: '/images/VICE.jpeg' },
    { name: 'Hon’ble Shri Vikas Deshmukh, IAS (Retd)', title: 'Secretary', image: '/images/SECRETY.jpeg' },
  ];

  return (
    <section className="bg-cyan-100 py-12">
      <div className="container mx-auto px-6">
        <h2 className="text-4xl font-bold text-center text-gray-800 mb-10">Leadership Team</h2>
        <div className="flex overflow-x-auto gap-8 no-scrollbar pb-4">
          {designData.map((item, index) => (
            <div
              key={index}
              className="flex-shrink-0 w-60 bg-white p-6 rounded-xl shadow-lg text-center transform transition-transform hover:scale-105 hover:shadow-2xl"
            >
              <div className="w-32 h-32 mx-auto mb-4 overflow-hidden rounded-full border-4 border-cyan-200 shadow-md">
                <Image
                  src={item.image}
                  alt={item.name}
                  width={128}
                  height={128}
                  className="w-full h-full object-cover object-top"
                />
              </div>
              <h3 className="text-lg font-semibold text-gray-700">{item.name}</h3>
              <p className="text-sm text-gray-500 mt-2">{item.title}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default Gallery;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

paje.js main


import HeaderSection from "./components/HeaderSection";
import Navbar from "./components/Navbar";
import Slider from "./components/HeroSlider";
import Gallery from "./components/Gallery";
import AboutSection from "./components/AboutSection ";
import Footer from "./components/Footer";
import Regional from "./components/Regional";
import Header from "./components/Header"; 
import RecentActivity from "./components/RecentActivity"
import Achievements from "./components/Achievements";
import Alumni from "./components/Alumni";
import AboutRayat from "./components/AboutRayat";
import Logo from "./components/Logo";
import ThreeSections from "./components/ThreeSections";
import RecentSchoolActivity from "./components/RecentSchoolActivity";

export default function Home() {
  return (
    <div>
     
      <HeaderSection />
   <Header />
      {/* Navbar */}
      <Navbar />
      {/* Image Slider */}
      <Slider />

      {/* About Section */}
     

      {/* News Section */}
     <ThreeSections />

      <AboutRayat />
    
      <AboutSection />

<RecentActivity />
<Gallery />

{/* <RecentSchoolActivity /> */}
<Regional />
<br />
<Achievements />
<Alumni /><br/>
<Logo />

      <Footer />
    </div>
  );
}